

@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-order-completed-page");
}



    <div class="page checkout-page order-completed-page">
        
        <div id="section">
            <h2 class="" style="background-color:white;">Pay 0.01 USD amount of ELA Coins to UnLock the Video</h2>
            <div class="text-right" id="qrcode">

            </div>

            <br />
            <div class="">

                <div>Address: 0x45BD27bB68B07FE9541B26955d880b70df34B960</div>
                <div>Amount:<div id="amntt">0</div></div>
                <br />
                <input type="button" id="metamas" class="button-1 order-completed-continue-button" value="Pay Using Metamask" onClick="this.disabled=true; this.value='Sending…'; "/>

            </div>
        </div>
        <iframe id="iframe_Id" width="670" height="290" class=""
                src=""></iframe>
        <br />
        @*<div class="page-body checkout-data">

            <div class="section order-completed">
                <div class="buttons">
                    <input type="button" value="@T("Checkout.ThankYou.Continue")" class="button-1 order-completed-continue-button" onclick="setLocation('@Url.RouteUrl("HomePage")')" />
                </div>
            </div>
        </div>*@
    </div>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="~/web3.min.js"></script>
<script src="~/abi.js"></script>
<script src="https://cdn.jsdelivr.net/gh/ethereumjs/browser-builds/dist/ethereumjs-tx/ethereumjs-tx-1.3.3.min.js"></script>

<script src="~/node_modules/ethers/dist/ethers.js"></script>
<script src="~/Scripts/qrcode.js"></script>
<script type="text/javascript">
    new QRCode(document.getElementById("qrcode"), "0x45BD27bB68B07FE9541B26955d880b70df34B960");
</script>
<script>

    var coinPriceUSD = 0;
    var ttal = 0;
    var add = 0;
    $.ajaxSetup({ async: false });
    $.ajax({
        url: 'https://api.coinmarketcap.com/v1/ticker/ela-coin/',

        success: function (data) {
            console.log(data);
            console.log(data[0].price_usd);
            coinPriceUSD = data[0].price_usd;


            var amnt = (1 / coinPriceUSD) * parseFloat('0.01');
    console.log(amnt);
    ttal = amnt;
     add = (Math.random() * (0.000000000000000001 - 0.000099999999999999) + 0.000000000000000001);
    ttal = (ttal + add);
    $('#amntt').html(ttal);
        }
    });

    let provider = ethers.getDefaultProvider('ropsten');
    let contract = new ethers.Contract(ContractAddress, abi, provider);
    //filter
    var admin = '0x45BD27bB68B07FE9541B26955d880b70df34B960'
    let filter = contract.filters.Transfer(null, admin);

            // Listen for our filtered results
            contract.on(filter, (from, to, value) => {
                if (value == ttal) {
                    alert('Payment received: ' + value/10 ** 18 + ' tokens from ' + from);
                    ////////
                    $('#iframe_Id').attr('src', 'http://www.youtube.com/embed/HO7mE8Ovju0?rel=0&autoplay=1');
                    $('#section').hide();
                }
                console.log('Payment received: ');
            });
    ///////////

    async function sendEther(to, value) {
        let privateKey = "F92307ABD3DFC5EEAA00CF856ED34DBD7C84E1BD01A6A7CB5094E69845F2B298"

        let wallet = new ethers.Wallet(privateKey, provider)

        console.log(wallet.address)
        // All properties are optional
        let transaction = {
            nonce: wallet.getTransactionCount(),//provider1.getTransactionCount(to),//
            gasLimit: 21000,
            gasPrice: ethers.utils.bigNumberify("1000000000"),
            to: to,
            value: ethers.utils.parseEther(value),
            //data: "0x",

            // This ensures the transaction cannot be replayed on different networks
            chainId: 3
        }

        //let signPromise = wallet.sign(transaction);
        let signedTransaction = await wallet.sign(transaction);

        return await provider.sendTransaction(signedTransaction);

    }




    //new ethers.Contract(ContractAddress, abi, provider1);
    $(function () {
        $('img').attr('style', '');
        var val = 0;

        $('#metamas').on('click', async function () {
           
            ///window.addEventListener('load', async () => {
            //Modern dapp browsers...
            if (window.ethereum) {
                window.web3 = new Web3(ethereum);
                try {
                    // Request account access if needed
                    await ethereum.enable();
                } catch (error) {
                    console.log(error);
                }
            }
            // Legacy dapp browsers...
            else if (window.web3) {
                window.web3 = new Web3(web3.currentProvider);
            }
            // Non-dapp browsers...
            else {
                console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');
            }


            //});


            if (window.web3) {
            await fnc();
             }
        })

        async function fnc() {
            var provider1 = new ethers.providers.Web3Provider(web3.currentProvider);
            var signer = provider1.getSigner();

            //let tx = await signer.sendTransaction(tx);
            let getAddress = await signer.getAddress();
            console.log(getAddress);
            val = await contract.balanceOf(getAddress);
            val = parseInt(val.toString()) / 10 ** 18;


            ttal = ttal * 10 ** 18;
            console.log(add);
            console.log(ttal + '=');
            var hexString = ttal.toString(16);
            console.log(ttal + '=' + hexString.length);

            hexString = Array(65 - hexString.length).join("0") + hexString;
            console.log(ttal + '=' + hexString);


            ;
            var userAccount = getAddress;
            //console.log(await provider1.getTransactionCount(getAddress))
            let transaction = {
            //    nonce:await provider1.getTransactionCount(getAddress),//
            //    gasLimit: 40000,
            //gasPrice: ethers.utils.bigNumberify("1000000000"),
                to: ContractAddress,
                value: '0x00',
                data: '0xa9059cbb000000000000000000000000' + admin.substr(2) + hexString,
                chainId: 3//ethers.utils.getNetwork('ropsten').chainId
            }
            //let signPromise = await signer.signMessage(transaction);
            //let provider = ethers.getDefaultProvider('ropsten');

            //var esm = await provider1.estimateGas(transaction);
            //console.log(esm);
            provider1.getBalance(getAddress).then(async (balance) => {

                // balance is a BigNumber (in wei); format is as a sting (in ether)
                let etherString = parseFloat(ethers.utils.formatEther(balance));

                if (etherString < 0.00004) {
                    console.log("Sending Ether....! " + ethers.utils.parseEther('0.00004'));
                    var rslt = await sendEther(getAddress, '0.00004');
                    console.log(rslt);
                    /////////////

                    provider1.waitForTransaction(rslt.hash).then(async (receipt) => {//rslt.hash
                        console.log('Transaction Mined: ' + receipt.transactionHash);
                        console.log(receipt);
                        console.log("Balance: " + etherString);
                        var rc = await signer.sendTransaction(transaction);
                        console.log("Receit: " + rc);
                    });

                } else {
                    console.log("Balance: " + etherString);
                    //var rc = await contract.transfer(getAddress, 20000000000000000);
                    var rc = await signer.sendTransaction(transaction);
                    console.log("Receit: " + rc);
                }



            });


        }

    })

</script>
